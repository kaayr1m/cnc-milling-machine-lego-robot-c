const int XDir = -1;
const int XLength = 550;
const int XRes = 4;             // X Resolution count per step
const int XPwr = 5;             // X axis movement power only during mill
const int XzeroPwr = 20;
const int XOffset = -100;

const int YDir = 1;
const int YLength = 470;
const int YRes = 9;             // Y Resolution count per step
const int YPwr = 10;            // Y axis movement power during mill
const int YzeroPwr = 30;
const int YOffset = 55;

const int ZDir = 1;
const int ZPwr = 30;           // Z axis movement power throughout

/**************************************
 Fixed X and Y step limits
 ***************************************/
const int xLim=104;
const int yLim=52;

/**************************************
 Object to be Milled
 ***************************************/
 
 //insert your cordinates in the example for below, i know it is alot :)
 
const int coord[52][52] =
{
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 600}, 
{600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 600, 600}, 
{600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 600, 600, 600, 600}, 
{600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 300, 300, 300, 300, 300, 300, 300, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 0, 600, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 600, 600, 300, 300, 600, 600, 600, 600, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 0, 600, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 600, 600, 300, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 600, 600, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 0, 600, 600, 600, 600, 600, 600, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 600, 600, 600, 600, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 0, 0, 0, 0, 600, 600, 600, 600, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 600, 600, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 600, 300, 300, 300, 300, 300, 300, 300, 300, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 600, 600, 600, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 600, 600, 600, 600, 600, 300, 300, 300, 300, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 0, 600, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 0, 600, 600, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 0, 600, 600, 600, 600, 600, 0, 0, 0, 0, 600, 600, 600, 600, 0, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 600, 600, 600, 0, 0, 0, 600, 600, 600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 600, 600, 600, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 0, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600}, 
{600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,
  600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600} 

};

/**************************************
 Sets offsets
 ***************************************/
void offsetX()
{
motor[motorB]=25*XDir;
while (nMotorEncoder[motorB]>XOffset);
motor[motorB]=0;
}

void offsetY()
{
motor[motorA]=20;
while (nMotorEncoder[motorA]<YOffset);
motor[motorA]=0;
}

/**************************************
 Resets Y axis
 ***************************************/
void zeroY()
{
    motor[motorA] = (-YzeroPwr)*YDir;
    while(SensorValue[S1] == 0);
    motor[motorA] = 0;
    nMotorEncoder[motorA] = 0;
    offsetY();
}

/**************************************
 Resets X axis
 ***************************************/
void zeroX()
{
    motor[motorB] = (-XzeroPwr)*XDir;
    while(SensorValue[S2] == 0);
    motor[motorB] = 0;
    nMotorEncoder[motorB] = 0;
    offsetX();
}

/**************************************
 Resets Z axis
 ***************************************/
void zeroZ()
{
    motor[motorC] = (-ZPwr)*ZDir;
    while(SensorValue[S3] == 0);
    motor[motorC] = 0;
    nMotorEncoder[motorC] = 0;
}

/**************************************
 Check if array is within bounds
 ***************************************/
bool check()
{
    bool error = false; // Error is the Z axis value is out of bounds
    
    for (int column=0; column<52; column++)
    {
        for (int row=0; row<52; row++)
        {
            if (coord[row][column]<0|| coord[row][column]>600)
                error = true;
            
            if (error == true)
            {
                nxtDisplayString(0,"#error!");
                nxtDisplayString(1,"at coord %d,%d",row,column);
                column = 60;
                row = 60;
                PlaySound(soundBeepBeep);
                PlaySound(soundBeepBeep);
            }
        }
}
    if (error == true)
        return true;
    
  else
  return false;
}
/**************************************
 Controls Z axis
 ***************************************/
void zMov(int z)
{
    if(nMotorEncoder[motorC]*ZDir < z)
    {
        motor[motorC] = ZPwr*ZDir;
        while(nMotorEncoder[motorC]*ZDir < z);
        motor[motorC] = 0;
    }
    
    else if(nMotorEncoder[motorC]*ZDir > z)
    {
        motor[motorC] = (-ZPwr)*ZDir;
        while(nMotorEncoder[motorC]*ZDir > z);
        motor[motorC] = 0;
    }
}

/**************************************
 Controls an X axis pass
 ***************************************/
void xMov(int xLim, int y)
{
int l=1; //nxtDisplay lines
    
    for(int i=0; i<xLim; i++)
    {
  /** Display coordinates **/
  nxtDisplayString(l,"X%d Y%d Z%d",i,y,coord[y][floor(i/2)]);
        
  zMov(coord[y][floor(i/2)]);          // Call Z axis control
        
  /** X axis movement **/
        motor[motorB] = XPwr*XDir;
        while(nMotorEncoder[motorB]*XDir < XRes);
        motor[motorB] = 0;
        nMotorEncoder[motorB]=0;
        
        /** line Display condition**/
        if (l == 6)
            l=1;
        
        else
            l++;
        
        if (i==xLim-1)                            //Pass indicator
        {
            eraseDisplay();
            nxtDisplayString(4,"Line Pass %d done",y);
            PlaySound(soundLowBuzzShort);
        }
        
    }
    
zeroZ();
zeroX();
    
}

/**************************************
 MAIN PROGRAM
 ***************************************/
task main()
{
bNoPowerDownOnACAdaptor = true;   // will NOT power down when connected to AC adapter
    
/**************************************
     Declare reset sensors
     ***************************************/
SensorType[S1] = sensorTouch;
SensorType[S2] = sensorTouch;
SensorType[S3] = sensorTouch;
    
/**************************************
     Program always runs unless ended
     ***************************************/
		bool run = true;
    bool proceed = true;
    
    while(run)
    {
        
   PlaySound(soundUpwardTones);
        
   /** Displays info of the mill **/
        nxtDisplayString(0,"/**************");
        nxtDisplayString(1,"LEGO NXT MILL");
        nxtDisplayString(2,"'12 TRON PROJECT");
        nxtDisplayString(3,"**************/");
        nxtDisplayString(5,"PRESS ORNG BTTN");
        nxtDisplayString(6,"TO INSRT FOAM");
        
        /** Waits for button press **/
        while(nNxtButtonPressed!=3);
        while(nNxtButtonPressed==3);
        
        /** Zeros the the axes **/
        zeroZ();
        zeroX();
        zeroY();
        
        /** Moves to insert foam **/
        nMotorEncoder[motorB]=0;
        nMotorEncoder[motorA]=0;
        
        motor[motorB]=-30;
        while(nMotorEncoder[motorB] > -XLength);
        motor[motorB]=0;
        
        motor[motorA]=30;
        while(nMotorEncoder[motorA]< YLength);
        motor[motorA]=0;
        
        eraseDisplay();
        nxtDisplayString(0,"INSERT FOAM THEN");
        nxtDisplayString(1,"PRESS ORNG BTTN");
        
        /** Waits for button press **/
        while(nNxtButtonPressed!=3);
        while(nNxtButtonPressed==3);
        
        eraseDisplay();
        nxtDisplayString(0,"Calibrating....");
        
        /** Calibrates/Zeros the Mill **/
        zeroZ();
        zeroX();
        zeroY();
        
        nxtDisplayString(0,"Calib Complete ");
        wait10Msec(200);                // waits for user to see status
        nxtDisplayString(0,"Checking array...");
        wait10Msec(100);                // waits for user to see status
        
        if (!check())                   // calls function to check array
        {
            nxtDisplayString(0,"Proceed to mill?");
            PlaySound(soundUpwardTones);
            
            /** Waits for acknowledgement to proceed with milling job **/
            while(nNxtButtonPressed==-1);
            
            if(nNxtButtonPressed!=3)
                proceed = false;
              
            while(nNxtButtonPressed!=-1);
            
            if (proceed)
                {
                    eraseDisplay();
                    nxtDisplayString(0,"Milling.......");
                    
                    /**************************************
                     Milling control
                     ***************************************/
                    for(int j=0; j<yLim; j++)
                    {
                        xMov(xLim, j); // Call X axis control
                        
                        /** Y axis movement **/
                        motor[motorA] = YPwr*YDir;
                        while(nMotorEncoder[motorA]*YDir < YRes);
                        motor[motorA] = 0;
                        nMotorEncoder[motorA]=0;
                    }
                    
                    eraseDisplay();
                    nxtDisplayString(0,"Milling Complete");
                }
            else
                nxtDisplayString(0,"Terminated!");
            
        }
        
        PlaySound(soundFastUpwardTones);
        wait10Msec(400);   //Gives time for user to ackowledge the alert 
        PlaySound(soundFastUpwardTones);
        
        /********************************************************************
         End of milling job/ after error/ after not proceed with mill
         *******************************************************************/
        zeroZ();
        zeroY();
        zeroX();
        
        /** move motors asside to remove (possibly milled) object **/
        nMotorEncoder[motorB]=0;
        nMotorEncoder[motorA]=0;
        
        motor[motorB]=-30;
        while(nMotorEncoder[motorB] > -XLength);
        motor[motorB]=0;
        
        motor[motorA]=30;
        while(nMotorEncoder[motorA]<YLength);
        motor[motorA]=0;
        
        eraseDisplay();
        nxtDisplayString(0,"PRESS ORNG BTTN");
        nxtDisplayString(1,"TO PROCEED");
        
        while(nNxtButtonPressed!=3);
        while(nNxtButtonPressed==3);                     //Foam removed or proceed 
        
        /** Promts for program termination **/
        eraseDisplay();
        nxtDisplayString(0,"Hold orng bttn");
        nxtDisplayString(1,"for 5 secs to");
        nxtDisplayString(2,"end prgrm else");
        nxtDisplayString(3,"press n release");
        
        time100(0)= 0;
        while(nNxtButtonPressed!=3);
        while(nNxtButtonPressed==3);
        int time= time100(0);
  
        if(time/10 >= 5)
            run = false;
        
    }
    
    eraseDisplay();
    nxtDisplayString(0,"Goodbye!");
    PlaySound(soundDownwardTones);
    wait10Msec(300);
}
